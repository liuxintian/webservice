<?xml version="1.0" encoding="UTF-8"?>
<bean:beans
	xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.1.xsd">
	<!--
	Applies to root appContext beans only, for MVC Controllers is this declaration repeated in MVC config.
	Actually, we currently don't need this as we have on annotation outside of MVC.
	There is more here that can go wrong. If you use interface-based proxy (our demo uses CGLib), you may
	need to add proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, Fine-grained
	Access Control, from header "Method security on Spring MVC controllers" on discusses these topics.
	-->
	<security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled" jsr250-annotations="enabled"/>
	
	<http realm="Protected API"
		pattern="/rest/**"
		use-expressions="true"
		create-session="stateless"
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="restAuthenticationManager"> 
		<headers>
			<header name="X-Token-Valid" value="false"/>
			<frame-options policy="SAMEORIGIN"/>
		</headers>
		<!--
		Added after moving to Spring Boot 1.3 + Spring Security 4.x,
		otherwise we could not login with basic auth because of: Expected CSRF token not found
		TODO: Please, mind, that I did not migrate this XML to Spring Security 4.x except for this element
		-->
		<csrf disabled="true"/>
		<custom-filter ref="restAuthenticationFilter" position="FORM_LOGIN_FILTER"/>

		<intercept-url pattern="/*" access="permitAll"/>
		<intercept-url pattern="/rest/**" access="isFullyAuthenticated()"/>
	</http>
	<http use-expressions="true">
		<!--<intercept-url pattern="/**" requires-channel="https" />-->
		<intercept-url pattern="/" access="permitAll"/>
	    <intercept-url pattern="/welcome" access="hasRole('ROLE_ADMIN')"/>
	    <intercept-url pattern="/asxdata/**" access="permitAll"/>
	    <intercept-url pattern="/user/**" access="hasRole('ROLE_ADMIN')"/>
	    <intercept-url pattern="/cfg/**" access="hasRole('ROLE_ADMIN')"/> <!-- 103.253.92.26  and (hasIpAddress('10.0.0.0/16') or hasIpAddress('127.0.0.1/32'))-->
	    <intercept-url pattern="/stat/**" access="hasRole('ROLE_ADMIN')"/>
	    <intercept-url pattern="/agm/online" access="hasRole('ROLE_ADMIN')"/>
	    <intercept-url pattern="/agm/news" access="hasRole('ROLE_ADMIN')"/>
	    
	    <intercept-url pattern="/agm" access="isFullyAuthenticated()"/>
	    <intercept-url pattern="/agm/approved" access="isFullyAuthenticated()"/>
	    <intercept-url pattern="/agm/index" access="isFullyAuthenticated()"/>
	    <intercept-url pattern="/agm/getuserhistmsg" access="permitAll"/>
		<intercept-url pattern="/login" access="permitAll"/>
	    <form-login login-page="/login"
	    			authentication-success-handler-ref="mySuccessHandler"
	    			login-processing-url="/j_spring_security_check" 
	    			authentication-failure-url="/login?error" 
	    			username-parameter="username" 
	    			password-parameter="password"/>
	    			<!--authentication-success-handler-ref="mySuccessHandler"-->
	    			<!--default-target-url="/agm/index"-->
		<logout logout-success-url="/login?logout" />
		<headers>
			<header name="X-Token-Valid" value="false"/>
			<frame-options policy="SAMEORIGIN"/>
		</headers>

		<csrf disabled="true"/>
	    <logout/>
	</http>

 	<bean:bean id="unauthorizedEntryPoint" class="com.omt.webservice.security.main.restsec.UnauthorizedEntryPoint"/>

	<bean:bean id="userDetailService" class="com.omt.webservice.security.main.secimpl.MyUserDetailsService"/>

	<authentication-manager id="restAuthenticationManager">
		<authentication-provider user-service-ref="userDetailService">
			<!--
			Default password encoder is PlaintextPasswordEncoder, which fits with our hard coded users.
			Obviously not a good choice otherwise.
			-->
		</authentication-provider>
	</authentication-manager>
	
	<bean:bean id="tokenManager" class="com.omt.webservice.security.main.secimpl.TokenManagerSingle"/>

	<bean:bean id="authenticationService" class="com.omt.webservice.security.main.secimpl.AuthenticationServiceDefault"
		c:authenticationManager-ref="restAuthenticationManager" c:tokenManager-ref="tokenManager"/>

	<bean:bean id="restAuthenticationFilter" class="com.omt.webservice.security.main.restsec.TokenAuthenticationFilter"
		c:authenticationService-ref="authenticationService" c:logoutLink="/rest"/>
			
 </bean:beans>
